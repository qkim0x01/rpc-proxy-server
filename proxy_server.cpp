// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <curl/curl.h>
#include <iostream>
#include <string>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::proxy;

int CacheSize = 20;
int PolicyType = 0;

#include "cache.h"

class proxyHandler : virtual public proxyIf {
 private:
  Cache *cache;
  int64_t cache_hit;
  int64_t requests;
  unsigned long long access_time;
 public:
  proxyHandler() {
    // Your initialization goes here
    size_t size = 1<<CacheSize;
    cache = new Cache(size);
    cache_hit = 0;
    requests = 0;
    access_time = 0;
  }

  static size_t writefunc(void *ptr, size_t size, size_t nmemb, web_req *req)
  {
    size_t new_size = req->size + size*nmemb;
    char* new_ptr = (char*)ptr;
    req->size = new_size;
    req->page = std::string(new_ptr);
    return size*nmemb;
  }

  web_req download_page(const std::string& url){
    CURL *curl;
    CURLcode res;

    web_req req;
    req.size = 0;
    const char *c_url = url.c_str();

    curl_global_init(CURL_GLOBAL_DEFAULT);

    curl = curl_easy_init();

    if(curl) {
      //curl_easy_setopt(curl, CURLOPT_URL, hey);
      curl_easy_setopt(curl, CURLOPT_URL, c_url);
      curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&req);
      curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writefunc);
    }

    res = curl_easy_perform(curl);

    if (res != CURLE_OK) {
      std::cout << "curl_easy_perform failed" << std::endl;
    }

    curl_easy_cleanup(curl);

    return req;
  }

  void httpget(std::string& _return, const std::string& url) {
    // Your implementation goes here
    requests++;
    struct timeval t_start, t_end;

    web_req req;
    gettimeofday(&t_start, NULL);
    bool hit = cache->get(url, req);
    gettimeofday(&t_end, NULL);
    if (hit){
      access_time += (t_end.tv_sec - t_start.tv_sec) * 1000000 + (t_end.tv_usec - t_start.tv_usec);
      cache_hit++;
      //std::cout << "cache hit - " << url << std::endl;
    }
    else{
      //std::cout << "cache miss - " << url << std::endl;

      gettimeofday(&t_start, NULL);
      req = download_page(url);

      struct timeval t;
      gettimeofday(&t, NULL);
      req.ts = t.tv_sec * 1000000 + t.tv_usec;
      //std::cout << t.tv_sec << " sec " << t.tv_usec << " usec" << std::endl;
      cache->put(url, req);
      gettimeofday(&t_end, NULL);

      access_time += (t_end.tv_sec - t_start.tv_sec) * 1000000 + (t_end.tv_usec - t_start.tv_usec);     
      //std::cout << req.page << std::endl;
    }
    std::cout << url << " \t" << cache_hit << " hits out of " << requests << " requests, time " << (double)access_time / 1000000 << std::endl;
    std::string result(req.page);
    _return = result;
  }

  void resetCounters() {
    // Your implementation goes here
    cache_hit = 0;
    requests = 0;
    access_time = 0;
  }

  int64_t getCacheHit() {
    // Your implementation goes here
    return cache_hit;
  }

  int64_t getReqNum() {
    // Your implementation goes here
    return requests;
  }

  double getServerTime() {
    // Your implementation goes here
    return (double) access_time / 1000000;
  }

};

void help_print(){
  printf("Usage : proxy_server [options] \n\n");
    printf("Proxy server for http traffic. Can cache request and increase web performance\n");
    printf("Options:\n");
    printf("\t-size \t<num> \tCache size, 2**<num> bytes (Default: 20 for 1MB)\n");
    printf("\t-policy <num> \tReplacement policy (Default: 0):\n");
    printf("\t\t\t0: \tno cache\n");
    printf("\t\t\t1: \trandom\n");
    printf("\t\t\t2: \tfifo\n");
    printf("\t\t\t3: \tmax size\n\n");
    exit(1);
}

int main(int argc, char **argv) {
  extern int CacheSize;
  extern int PolicyType;

  if (argc < 5){
    printf("Starting Proxy Server with default options!\nFor available options use -h or -help\n");
  }

  for ( int ii = 1; ii < argc; ii++) {
    if (argv[ii][0] == '-') {     
      if (!strcmp(argv[ii], "-h") || !strcmp(argv[ii], "-help")) {
        help_print();
      }     
      else if (!strcmp(argv[ii], "-policy")) {
        if (ii < argc - 1) {      
          PolicyType = atoi(argv[ii+1]);
          ii += 1;
        }
      }
      else if (!strcmp(argv[ii], "-size")) {
        if (ii < argc - 1) {      
          CacheSize = atoi(argv[ii+1]);
          ii += 1;
        }
      }
    }
  }

  int port = 9090;
  shared_ptr<proxyHandler> handler(new proxyHandler());
  shared_ptr<TProcessor> processor(new proxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

